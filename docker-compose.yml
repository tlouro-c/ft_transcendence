services:
  frontend:
    container_name: frontend-dist
    image: frontend-dist-img
    build: requirements/frontend
    depends_on:
      - user-management
      - live-chat
      - game
    networks:
      - docker-network
    ports:
      - 443:443
    volumes:
      - ssl:/etc/ssl/my_certs
  
  user-management:
    container_name: user-management-service
    image: user-management-service-img
    build: requirements/backend/usermanagement
    environment:
      - DB=${POSTGRES_DB_USER_MANAGEMENT}
      - DB_HOST=${POSTGRES_DB_USER_MANAGEMENT_HOST}
      - DB_PORT=${POSTGRES_DB_USER_MANAGEMENT_PORT}
      - DB_USER=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - DJANGO_SUPERUSER_USERNAME=${DJANGO_SUPER_USER}
      - DJANGO_SUPERUSER_PASSWORD=${DJANGO_PASSWORD}
    depends_on:
      user-management-db:
        condition: service_healthy
    networks:
      - docker-network
    expose:
      - '8000'
    ports: 
      - 8000:8000
    volumes:
      - ssl:/etc/ssl/my_certs
   
  live-chat:
    container_name: live-chat-service
    image: live-chat-service-img
    build: requirements/backend/livechat
    environment:
      - DB=${POSTGRES_DB_LIVE_CHAT}
      - DB_HOST=${POSTGRES_DB_LIVE_CHAT_HOST}
      - DB_PORT=${POSTGRES_DB_LIVE_CHAT_PORT}
      - DB_USER=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - DJANGO_SUPERUSER_USERNAME=${LIVE_CHAT_USER}
      - DJANGO_SUPERUSER_PASSWORD=${DJANGO_PASSWORD}
      - DJANGO_SUPERUSER_EMAIL=${DJANGO_EMAIL}
    depends_on:
      live-chat-db:
        condition: service_healthy
    networks:
      - docker-network
    ports: 
      - 9000:9000
    volumes:
      - ssl:/etc/ssl/my_certs

  game:
    container_name: game-service
    image: game-service-img
    build: requirements/backend/game
    environment:
      - DB=${POSTGRES_DB_GAME}
      - DB_HOST=${POSTGRES_DB_GAME_HOST}
      - DB_PORT=${POSTGRES_DB_GAME_PORT}
      - DB_USER=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - DJANGO_SUPERUSER_USERNAME=${GAME_USER}
      - DJANGO_SUPERUSER_PASSWORD=${DJANGO_PASSWORD}
      - DJANGO_SUPERUSER_EMAIL=${DJANGO_EMAIL}
    depends_on:
      live-chat-db:
        condition: service_healthy
    networks:
      - docker-network
    ports: 
      - 8001:8001
    volumes:
      - ssl:/etc/ssl/my_certs

  user-management-db:
    container_name: user-management-db-container
    image: postgres
    environment:
      - POSTGRES_DB=${POSTGRES_DB_USER_MANAGEMENT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - user-management-db-data:/var/lib/postgresql/data
      - media:/app/usermanagement/media
    networks:
      - docker-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 2s
      timeout: 2s
      retries: 5
    

  live-chat-db:
    container_name: live-chat-db-container
    image: postgres
    environment:
      - POSTGRES_DB=${POSTGRES_DB_LIVE_CHAT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - live-chat-db-data:/var/lib/postgresql/data
    networks:
      - docker-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 2s
      timeout: 2s
      retries: 5

  game-db:
    container_name: game-db-container
    image: postgres
    environment:
      - POSTGRES_DB=${POSTGRES_DB_GAME}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - game-db-data:/var/lib/postgresql/data
    networks:
      - docker-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 2s
      timeout: 2s
      retries: 5

volumes:
  user-management-db-data: 
  live-chat-db-data:
  game-db-data: 
  media:
  ssl:


networks:
  docker-network:
    name: docker-network
